{"version":3,"sources":["api/todolist-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/TodolistsList/TodolistList.tsx","components/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TodoTaskPriorities","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","todolistsAPI","title","id","put","todolistId","taskId","taskTitle","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","description","priority","startDate","deadline","then","res","resultCode","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","errorMessage","setErrorMessage","addItemHandler","trim","TextField","variant","label","onChange","e","currentTarget","onKeyPress","charCode","className","helperText","size","IconButton","onClick","color","Add","fontSize","EditableSpan","props","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","onTitleChangeHanler","useCallback","newValue","changeTaskTitle","key","Completed","Checkbox","checked","newstatusValue","changeTaskStatus","New","removeTask","Delete","TodoList","demo","useDispatch","useEffect","todolist","items","setTasksAC","addTask","changeTodoListTitle","newTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodoList","filter","removeTodoList","entityStatus","map","Button","TodolistList","todolists","useSelector","state","auth","thunk","action","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","changeTodolistFilterAC","removeTodolistAC","changeTodolistTitleAC","addTodolist","addTodolistTC","Grid","container","style","padding","spacing","tl","allTodolistTasks","Paper","elevation","to","Alert","ErrorSnackbar","app","dispath","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","path","render","exact","top","textAlign","width","CircularProgress","Boolean","window","location","hostname","match","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8feb2ff.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': 'fdb08a17-9e00-497a-9ef1-efaa046e77dc'\r\n  }\r\n}\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n  ...settings\r\n})\r\n\r\n// api\r\nexport const authAPI = {\r\n  login(data: LoginParamsType) {\r\n    return instance.post<ResponseType<{userId?: number}>>('auth/login', data)\r\n  },\r\n  me() {\r\n    const promise = instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\r\n    return promise\r\n  },\r\n  logout() {\r\n    const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login')\r\n    return promise\r\n  }\r\n}\r\n\r\nexport const todolistsAPI = {\r\n  getTodolists() {\r\n    return instance.get<Array<TodolistType>>('todo-lists')\r\n  },\r\n  createTodolist(title: string) {\r\n    return instance.post<ResponseType<{item: TodolistType}>>('todo-lists', {title: title})\r\n  },\r\n  deleteTodolist(id: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n  },\r\n  updateTodolist(id: string, title: string) {\r\n    return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n  },\r\n  getTasks(todolistId: string) {\r\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n  },\r\n  createTask(todolistId: string, taskTitle: string) {\r\n    return instance.post<ResponseType<{item:TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle})\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n    return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n  }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: D\r\n}\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\nexport enum TodoTaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\nexport type TaskType = {\r\n  title: string\r\n  todoListId: string\r\n  id: string\r\n  description: string\r\n  status: TaskStatuses\r\n  order: number\r\n  priority: TodoTaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n  addedDate: string\r\n}\r\nexport type UpdateTaskType = {\r\n  description: string\r\n  title: string\r\n  status: boolean\r\n  priority: number\r\n  startDate: string\r\n  deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: TaskType[]\r\n}\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  status: TaskStatuses\r\n  priority: TodoTaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n}\r\n\r\n// paramsType\r\nexport type LoginParamsType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha?: string\r\n}","import { setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from \"../app/app-reducer\"\r\nimport { ResponseType } from \"../api/todolist-api\"\r\nimport { Dispatch } from \"react\"\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n  if (data.messages.length) {\r\n    dispatch(setAppErrorAC(data.messages[0]))\r\n  } else {\r\n    dispatch(setAppErrorAC('some error occurred'))\r\n  }\r\n  dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n  dispatch(setAppErrorAC(error.message ? error.message : \"Some error occurred\"))\r\n  dispatch(setAppStatusAC('failed'))\r\n}\r\n","import { Dispatch } from \"redux\"\r\nimport { authAPI, LoginParamsType } from \"../../api/todolist-api\"\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from \"../../app/app-reducer\"\r\nimport { handleServerAppError, handleServerNetworkError } from \"../../utils/error-utils\"\r\n  \r\nconst initialState: InitialStateType = {\r\n  isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n  \r\n  switch (action.type) {\r\n      case 'login/SET-IS-LOGGED-IN':\r\n        return {...state, isLoggedIn: action.value}\r\n      default:\r\n        return state\r\n  }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ThunkDispatch>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI.login(data)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((error: { message: string }) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ThunkDispatch>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI.logout()\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(false))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\ntype InitialStateType = {\r\n  isLoggedIn: boolean\r\n}\r\n\r\ntype ThunkDispatch = \r\n  | ActionsType\r\n  | SetAppStatusActionType\r\n  | SetAppErrorActionType\r\n","import { Dispatch } from \"redux\"\r\nimport { authAPI } from \"../api/todolist-api\"\r\nimport { setIsLoggedInAC } from \"../features/Login/auth-reducer\"\r\n\r\nconst initialState: InitialStateType = {\r\n  status: 'idle',\r\n  error: null,\r\n  isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'APP/SET-STATUS':\r\n      return { ...state, status: action.status }\r\n    case 'APP/SET-ERROR':\r\n      return { ...state, error: action.error }\r\n    case 'APP/SET-IS-INITIALIZED':\r\n      return { ...state, isInitialized: action.value }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({ type: 'APP/SET-IS-INITIALIZED', value } as const)\r\n\r\n// thunks\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI.me().then(res => {\r\n    if (res.data.resultCode === 0) {\r\n      dispatch(setIsLoggedInAC(true))\r\n    }\r\n    dispatch(setAppInitializedAC(true))\r\n  })\r\n}\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n  // происходит ли сейчас взаимодействие с сервером\r\n  status: RequestStatusType\r\n  // если произойдёт глобальная ошибка - запишим текст ошибки сюда\r\n  error: string | null\r\n  // true когда приложение проинициализировалось (провеили юзера, получили настройки и т.д.)\r\n  isInitialized: boolean\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\nexport type ActionsType =\r\n  | SetAppErrorActionType\r\n  | SetAppStatusActionType\r\n  | ReturnType<typeof setAppInitializedAC>","import { Dispatch } from \"redux\"\r\nimport { todolistsAPI, TodolistType } from \"../../api/todolist-api\"\r\nimport { RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from \"../../app/app-reducer\"\r\nimport { handleServerNetworkError } from \"../../utils/error-utils\"\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TODOLIST':\r\n      return state.filter(tl => tl.id !== action.todolistId)\r\n    case 'ADD-TODOLIST':\r\n      return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n    case 'CHANGE-TODOLIST-TITLE':\r\n      return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n    case 'CHANGE-TODOLIST-FILTER':\r\n      return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n    case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n      return state.map(tl => tl.id === action.id ? {...tl, status: action.status} : tl)\r\n    case 'SET-TODOLISTS':\r\n      return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n//actions\r\nexport const removeTodolistAC = (todolistId: string) => ({ type: 'REMOVE-TODOLIST', todolistId } as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: 'ADD-TODOLIST', todolist } as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({ type: 'CHANGE-TODOLIST-TITLE', id, title } as const)\r\nexport const changeTodolistFilterAC = (value: FilterValuesType, todolistId: string) => ({ type: 'CHANGE-TODOLIST-FILTER', filter: value, id: todolistId } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({ type: 'SET-TODOLISTS', todolists } as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({ type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\n\r\n//thunks\r\nexport const fetchTodolistsTC = () => {\r\n  return (dispatch: Dispatch<ThunkDispatch>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTodolists()\r\n      .then((res) => {\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        dispatch(setTodolistsAC(res.data))\r\n      })\r\n      .catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n      })\r\n  }\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<ThunkDispatch>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n  todolistsAPI.deleteTodolist(todolistId)\r\n  .then((res) => {\r\n    dispatch(removeTodolistAC(todolistId))\r\n    dispatch(setAppStatusAC('succeeded'))\r\n  })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ThunkDispatch>) => {\r\n  todolistsAPI.createTodolist(title)\r\n    .then((res) => {\r\n      dispatch(addTodolistAC(res.data.data.item))\r\n    })\r\n}\r\n\r\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  todolistsAPI.updateTodolist(id, title)\r\n    .then((res) => {\r\n      dispatch(changeTodolistTitleAC(id, title))\r\n    })\r\n}\r\n\r\n//types\r\ntype ActionsType =\r\n  | AddTodolistActionType\r\n  | SetTodolistsActionType\r\n  | RemoveTodolistActionType\r\n  | ReturnType<typeof changeTodolistTitleAC>\r\n  | ReturnType<typeof changeTodolistFilterAC>\r\n  | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\ntype ThunkDispatch = ActionsType | SetAppStatusActionType | SetAppErrorActionType\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n  entityStatus: RequestStatusType\r\n}","import { Dispatch } from \"redux\"\r\nimport { TaskStatuses, TaskType, todolistsAPI, TodolistType, TodoTaskPriorities, UpdateTaskModelType } from \"../../api/todolist-api\"\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from \"../../app/app-reducer\"\r\nimport { AppRootStateType } from \"../../app/store\"\r\nimport { handleServerAppError, handleServerNetworkError } from \"../../utils/error-utils\"\r\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists-reducer\"\r\n  \r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n  \r\n  switch (action.type) {\r\n      case 'REMOVE-TASK':\r\n        return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n      case 'ADD-TASK':\r\n        return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n      case 'UPDATE-TASK':\r\n        return {...state, [action.todolistId]: state[action.todolistId]\r\n          .map(t => t.id === action.taskId ? {...t, ...action.model} : t)}\r\n      case 'ADD-TODOLIST':\r\n        return {...state, [action.todolist.id]: []}\r\n      case 'REMOVE-TODOLIST':\r\n        return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.todolistId)}\r\n      case 'SET-TODOLISTS': {\r\n        const copyState = {...state}\r\n        action.todolists.forEach(tl => {copyState[tl.id] = []})\r\n        return copyState\r\n      }\r\n      case 'SET-TASKS':\r\n        return {...state, [action.todolistId]: action.tasks}\r\n      default:\r\n        return state\r\n  }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', todolistId, taskId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({type: 'UPDATE-TASK', taskId, model, todolistId} as const)\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => ({type: 'CHANGE-TASK-TITLE', taskId, todolistId, title} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  todolistsAPI.getTasks(todolistId)\r\n    .then((res) => {\r\n      const tasks = res.data.items\r\n      dispatch(setTasksAC(tasks, todolistId))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  todolistsAPI.deleteTask(todolistId, taskId)\r\n    .then(res => {\r\n      const action = removeTaskAC(taskId, todolistId)\r\n      dispatch(action)\r\n    })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType |  SetAppStatusActionType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  todolistsAPI.createTask(todolistId, title)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(addTaskAC(res.data.data.item))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n  (dispatch: Dispatch<ThunkDispatch>, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n    const task =  state.tasks[todolistId].find(t => t.id === taskId)\r\n\r\n    if (!task) {\r\n      console.warn(\"task not find in the state\")\r\n      return\r\n    }\r\n  \r\n    const apiModel: UpdateTaskModelType = {\r\n      title: task.title,\r\n      description: task.description,\r\n      status: task.status,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      deadline: task.deadline,\r\n      ...domainModel\r\n    }\r\n\r\n    todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n      .then(res => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n        } else {\r\n          handleServerAppError(res.data, dispatch)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n      })\r\n  }\r\n  \r\n// types\r\nexport type ActionsType = \r\n| ReturnType<typeof removeTaskAC>\r\n| ReturnType<typeof addTaskAC>\r\n| ReturnType<typeof updateTaskAC>\r\n| ReturnType<typeof setTasksAC>\r\n| AddTodolistActionType\r\n| RemoveTodolistActionType\r\n| SetTodolistsActionType\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TodoTaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\n\r\ntype ThunkDispatch = \r\n  | ActionsType\r\n  | SetAppStatusActionType\r\n  | SetAppErrorActionType\r\n","import { IconButton, TextField } from '@material-ui/core'\r\nimport { Add } from '@material-ui/icons'\r\nimport React, { ChangeEvent, useState, KeyboardEvent } from 'react'\r\n\r\n    type AddItemFormPropsType = {\r\n        addItem: (title: string) => void\r\n        disabled?: boolean\r\n    }\r\n\r\n    const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n\r\n        const [title, setTitle ] = useState('')\r\n        const [errorMessage, setErrorMessage] = useState<string | null>(null)\r\n\r\n        const addItemHandler = () => {\r\n            if(title.trim() !== '') {\r\n                addItem(title.trim())\r\n                setTitle('')\r\n            } else {\r\n                setErrorMessage('Title is required!')\r\n            }\r\n        }\r\n\r\n        const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            if (errorMessage !== null) {\r\n                setErrorMessage(null)\r\n            }\r\n            setTitle(e.currentTarget.value)\r\n        }\r\n\r\n        const onPressEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if(e.charCode === 13) {\r\n                addItemHandler()\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <TextField\r\n                    disabled={disabled}\r\n                    value={title}\r\n                    id={'outlined-error-helper-text'}\r\n                    variant={'outlined'}\r\n                    label={'Type text'}\r\n                    error={!!errorMessage}\r\n                    onChange={onChangeTitleHandler}\r\n                    onKeyPress={onPressEnterHandler}\r\n                    className={errorMessage ? 'error' : ''}\r\n                    helperText={errorMessage}\r\n                    size={'small'}\r\n                />\r\n                <IconButton\r\n                    disabled={disabled}\r\n                    onClick={addItemHandler}\r\n                    color={'primary'}\r\n                >\r\n                    <Add fontSize={'large'} />\r\n                </IconButton>\r\n                \r\n            </div>\r\n        )\r\n    })\r\n\r\n    export default AddItemForm","import { TextField } from '@material-ui/core'\r\nimport React, { ChangeEvent, useState } from 'react'\r\n\r\nexport type EditableSpanPropsType = {\r\n  title: string\r\n  onChange: (newValue: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo( (props: EditableSpanPropsType) => {\r\n  \r\n  const [editMode, setEditMode] = useState(false)\r\n  const [title, setTitle] = useState(\"\")\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n    setTitle(props.title)\r\n  }\r\n  const activateViewMode = () => {\r\n    setEditMode(false)\r\n    props.onChange(title)\r\n  }\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    return  editMode\r\n      ? <TextField value={title} onChange={onChangeTitle} onBlur={activateViewMode} autoFocus/>\r\n      : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})\r\n\r\nexport default EditableSpan","import React, { ChangeEvent, useCallback } from 'react'\r\nimport EditableSpan from '../../../../components/EditableSpan'\r\nimport { Checkbox, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolist-api'\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo( (props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newstatusValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newstatusValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }\r\n    const onTitleChangeHanler = useCallback( (newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n            />\r\n            \r\n            <EditableSpan title={props.task.title} onChange={onTitleChangeHanler} />\r\n            <IconButton onClick={onClickHandler}><Delete /></IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Task","import React, { useCallback, useEffect } from 'react'\r\nimport AddItemForm from '../../../components/AddItemForm'\r\nimport EditableSpan from '../../../components/EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport Task from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolist-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\n\r\nexport type PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    removeTodoList: (id: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo (function({demo = false, ...props}: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            dispatch(fetchTasksTC(props.todolist.id))\r\n        } else {\r\n            return\r\n        }\r\n    }, [dispatch, props.todolist.id, demo])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props])\r\n    \r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.todolist.id)\r\n    }\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        props.changeTodoListTitle(props.todolist.id, newTitle)\r\n    }, [props])\r\n\r\n    const onAllClickHandler = useCallback( () => props.changeFilter('all', props.todolist.id), [props])\r\n    const onActiveClickHandler = useCallback( () => props.changeFilter('active', props.todolist.id), [props])\r\n    const onCompletedClickHandler = useCallback( () => props.changeFilter('completed', props.todolist.id), [props])\r\n\r\n    let tasksForTodoList = props.tasks\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.todolist.title} onChange={changeTodoListTitle} />\r\n                <IconButton onClick={removeTodoList} disabled={props.todolist.entityStatus === 'loading'}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n            <div>\r\n                { \r\n                    tasksForTodoList.map(t =>\r\n                        <Task\r\n                            key={t.id}\r\n                            task={t}\r\n                            todolistId={props.todolist.id}\r\n                            removeTask={props.removeTask}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                        />)\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    variant={props.todolist.filter === 'all' ? 'contained' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    size={'small'}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    variant={props.todolist.filter === 'active' ? 'contained' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}\r\n                    size={'small'}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    variant={props.todolist.filter === 'completed' ? 'contained' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color=\"secondary\"\r\n                    size=\"small\"\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default TodoList","import React, { useCallback, useEffect } from 'react'\r\nimport '../../app/App.css'\r\nimport { Grid, Paper } from '@material-ui/core'\r\nimport { addTodolistTC, changeTodolistFilterAC, changeTodolistTitleTC, fetchTodolistsTC, FilterValuesType, removeTodolistTC, TodolistDomainType } from '../TodolistsList/todolists-reducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addTaskTC, updateTaskTC, removeTaskTC, TasksStateType } from '../TodolistsList/tasks-reducer'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { TaskStatuses } from '../../api/todolist-api'\r\nimport TodoList from './Todolist/TodoList'\r\nimport AddItemForm from '../../components/AddItemForm'\r\nimport { Redirect } from 'react-router'\r\n\r\nexport type PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst TodolistList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [dispatch, demo, isLoggedIn])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC(taskId, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(taskId, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(taskId, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function ( value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilterAC(value, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((todolistId: string, newTitle: string) => {\r\n        const thunk = changeTodolistTitleTC(todolistId, newTitle)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Grid container style={{ padding: \"20px\" }}>\r\n                <AddItemForm addItem={addTodolist} />\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id]\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper elevation={3} style={{ padding: \"15px\" }}>\r\n                                    <TodoList\r\n                                        todolist={tl}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                        demo={demo}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodolistList","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../app/store'\r\nimport { setAppErrorAC } from '../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  //const [open, setOpen] = React.useState(false)\r\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n  const dispath = useDispatch()\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return\r\n    }\r\n    dispath(setAppErrorAC(null))\r\n    //setOpen(false)\r\n  }\r\n\r\n\r\n  const isOpen = error !== null\r\n  \r\n  return (\r\n      <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          {error}\r\n        </Alert>\r\n      </Snackbar>\r\n  )\r\n}","import { Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField } from \"@material-ui/core\"\r\nimport { useFormik } from \"formik\"\r\nimport React from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Redirect } from \"react-router\"\r\nimport { AppRootStateType } from \"../../app/store\"\r\nimport { loginTC } from \"./auth-reducer\"\r\n\r\nexport const Login = () => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const formik = useFormik({\r\n    validate: (values) => {\r\n      if (!values.email) {\r\n        return {\r\n          email: 'Email is required'\r\n        }\r\n      }\r\n      if (!values.password) {\r\n        return {\r\n          password: 'Password is required'\r\n        }\r\n      }\r\n    },\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false\r\n    },\r\n    onSubmit: values => {\r\n      dispatch(loginTC(values))\r\n    },\r\n  })\r\n\r\n  if(isLoggedIn) {\r\n    return <Redirect to={\"/\"} />\r\n  }\r\n\r\n  return (\r\n    <Grid container justify=\"center\">\r\n      <Grid item xs={4}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <FormControl>\r\n            <FormLabel></FormLabel>\r\n            <FormGroup>\r\n              <TextField\r\n                label=\"Email\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps(\"email\")}\r\n              />\r\n              {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n              <TextField\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps(\"password\")}\r\n              />\r\n              {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n              <FormControlLabel\r\n                label={'Remember me'}\r\n                control={<Checkbox\r\n                  {...formik.getFieldProps(\"rememberMe\")}\r\n                  checked={formik.values.rememberMe}\r\n                />}\r\n              />\r\n              <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n            </FormGroup>\r\n          </FormControl>\r\n        </form>\r\n        <br/>Login: shobanoff@gmail.com<br/>Password: 123456\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Login\r\n\r\n// login: free@samuraijs.com\r\n// pass: free","import React, { useCallback, useEffect } from 'react'\r\nimport './App.css'\r\nimport { AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar, Typography } from '@material-ui/core'\r\nimport TodolistList from '../features/TodolistsList/TodolistList'\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport { initializeAppTC, RequestStatusType } from './app-reducer'\r\nimport { BrowserRouter, Route } from 'react-router-dom'\r\nimport { Login } from '../features/Login/Login'\r\nimport { logoutTC } from '../features/Login/auth-reducer'\r\n\r\nexport type PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{ position: \"fixed\", top: \"30%\", textAlign: \"center\", width: \"100%\" }}\r\n        ><CircularProgress />\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar />\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        </IconButton>\r\n                        <Typography variant=\"h5\">\r\n                            Todolist\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress />}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route path={\"/\"} render={() => <Login />} />\r\n                    <Route exact path={\"/\"} render={() => <TodolistList demo={demo} />} />\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { authReducer } from '../features/Login/auth-reducer'\r\nimport { tasksReducer } from '../features/TodolistsList/tasks-reducer'\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer'\r\nimport { appReducer } from './app-reducer'\r\n\r\n// creating the structure of the state object\r\nconst rootReducer = combineReducers({\r\n  todolists: todolistsReducer,\r\n  tasks: tasksReducer,\r\n  app: appReducer,\r\n  auth: authReducer\r\n})\r\n\r\n// define the type of the entire state object\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// create store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n// to access the state through the browser console\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './app/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  , document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}