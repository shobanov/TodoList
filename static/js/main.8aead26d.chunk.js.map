{"version":3,"sources":["api/todolist-api.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/TodolistsList/TodolistList.tsx","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TodoTaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitle","model","initialState","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","apiModel","description","status","priority","startDate","deadline","then","res","action","type","updateTaskAC","console","warn","AddItemForm","React","memo","props","useState","setTitle","errorMessage","setErrorMessage","addItem","trim","TextField","value","variant","label","error","onChange","e","currentTarget","onKeyPress","charCode","className","helperText","size","IconButton","onClick","color","Add","fontSize","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","onTitleChangeHanler","useCallback","newValue","changeTaskTitle","key","Completed","Checkbox","checked","newstatusValue","changeTaskStatus","New","removeTask","Delete","TodoList","useDispatch","useEffect","setTasksAC","data","items","addTask","changeTodoListTitle","newTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodoList","filter","removeTodoList","map","Button","TodolistList","todolists","useSelector","state","thunk","a","removeTaskAC","removeTaskTC","addTaskAC","item","addTaskTC","changeStatus","changeTodolistFilterAC","removeTodolistAC","changeTodolistTitleAC","addTodolist","todolist","addTodolistTC","Grid","container","style","padding","spacing","tl","allTodolistTasks","Paper","elevation","App","AppBar","position","Toolbar","edge","aria-label","Typography","Container","fixed","Boolean","window","location","hostname","match","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8aead26d.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': 'fdb08a17-9e00-497a-9ef1-efaa046e77dc'\r\n  }\r\n}\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n  ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n  getTodolists() {\r\n    return instance.get<Array<TodolistType>>('todo-lists')\r\n  },\r\n  createTodolist(title: string) {\r\n    return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title})\r\n  },\r\n  deleteTodolist(id: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n  },\r\n  updateTodolist(id: string, title: string) {\r\n    return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n  },\r\n  getTasks(todolistId: string) {\r\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n  },\r\n  createTask(todolistId: string, taskTitle: string) {\r\n    return instance.post<ResponseType<{ item:TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle})\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n    return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n  }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\ntype ResponseType<D = {}> = {\r\n  resultCode: number\r\n  messages: Array<string> // or string[]\r\n  data: D\r\n}\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\nexport enum TodoTaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\nexport type TaskType = {\r\n  title: string\r\n  todoListId: string\r\n  id: string\r\n  description: string\r\n  status: TaskStatuses\r\n  order: number\r\n  priority: TodoTaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n  addedDate: string\r\n}\r\nexport type UpdateTaskType = {\r\n  description: string\r\n  title: string\r\n  status: boolean\r\n  priority: number\r\n  startDate: string\r\n  deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: TaskType[]\r\n}\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  status: TaskStatuses\r\n  priority: TodoTaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n}","import { Dispatch } from \"redux\"\r\nimport { todolistsAPI, TodolistType } from \"../../api/todolist-api\"\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TODOLIST': \r\n      return state.filter(tl => tl.id !== action.todolistId)\r\n    case 'ADD-TODOLIST': \r\n      return [{...action.todolist, filter: 'all'}, ...state]\r\n    case 'CHANGE-TODOLIST-TITLE':\r\n      return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n    case 'CHANGE-TODOLIST-FILTER':\r\n      return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n    case 'SET-TODOLISTS': \r\n      return action.todolists.map(tl => ({...tl, filter: 'all'}))\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n//actions\r\nexport const removeTodolistAC = (todolistId: string) => ({ type: 'REMOVE-TODOLIST', todolistId } as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: 'ADD-TODOLIST', todolist } as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({ type: 'CHANGE-TODOLIST-TITLE', id, title } as const)\r\nexport const changeTodolistFilterAC = (value: FilterValuesType, todolistId: string) => ({ type: 'CHANGE-TODOLIST-FILTER', filter: value, id: todolistId } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({ type: 'SET-TODOLISTS', todolists } as const)\r\n\r\n//thunks\r\nexport const fetchTodolistsTC = () => async (dispatch: Dispatch<ActionsType>) => {\r\n  const res = await todolistsAPI.getTodolists()\r\n  dispatch(setTodolistsAC(res.data))\r\n}\r\n\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  todolistsAPI.deleteTodolist(todolistId)\r\n    .then((res) => {\r\n      dispatch(removeTodolistAC(todolistId))\r\n    })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  todolistsAPI.createTodolist(title)\r\n    .then((res) => {\r\n      dispatch(addTodolistAC(res.data.data.item))\r\n    })\r\n}\r\n\r\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  todolistsAPI.updateTodolist(id, title)\r\n    .then((res) => {\r\n      dispatch(changeTodolistTitleAC(id, title))\r\n    })\r\n}\r\n\r\n//types\r\ntype ActionsType =\r\n  | AddTodolistActionType\r\n  | SetTodolistsActionType\r\n  | RemoveTodolistActionType\r\n  | ReturnType<typeof changeTodolistTitleAC>\r\n  | ReturnType<typeof changeTodolistFilterAC>\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n}","import { Dispatch } from \"redux\"\r\nimport { TaskStatuses, TaskType, todolistsAPI, TodolistType, TodoTaskPriorities, UpdateTaskModelType } from \"../../api/todolist-api\"\r\nimport { AppRootStateType } from \"../../app/store\"\r\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists-reducer\"\r\n  \r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n  \r\n  switch (action.type) {\r\n      case 'REMOVE-TASK':\r\n        return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n      case 'ADD-TASK':\r\n        return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n      case 'UPDATE-TASK':\r\n        return {...state, [action.todolistId]: state[action.todolistId]\r\n          .map(t => t.id === action.taskId ? {...t, ...action.model} : t)}\r\n      case 'ADD-TODOLIST':\r\n        return {...state, [action.todolist.id]: []}\r\n      case 'REMOVE-TODOLIST':\r\n        return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.todolistId)}\r\n      case 'SET-TODOLISTS': {\r\n        const copyState = {...state}\r\n        action.todolists.forEach(tl => {copyState[tl.id] = []})\r\n        return copyState\r\n      }\r\n      case 'SET-TASKS':\r\n        return {...state, [action.todolistId]: action.tasks}\r\n      default:\r\n        return state\r\n  }\r\n}\r\n\r\n\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', todolistId, taskId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({type: 'UPDATE-TASK', taskId, model, todolistId} as const)\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => ({type: 'CHANGE-TASK-TITLE', taskId, todolistId, title} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  todolistsAPI.getTasks(todolistId)\r\n    .then((res) => {\r\n      const tasks = res.data.items\r\n      const action = setTasksAC(tasks, todolistId)\r\n      dispatch(action)\r\n    })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  todolistsAPI.deleteTask(todolistId, taskId)\r\n    .then(res => {\r\n      const action = removeTaskAC(taskId, todolistId)\r\n      dispatch(action)\r\n    })\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  todolistsAPI.createTask(todolistId, title)\r\n    .then(res => {\r\n      const task = res.data.data.item\r\n      const action = addTaskAC(task)\r\n      dispatch(action)\r\n    })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n  (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n    const task =  state.tasks[todolistId].find(t => t.id === taskId)\r\n\r\n    if (!task) {\r\n      console.warn(\"task not find in the state\")\r\n      return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n      title: task.title,\r\n      description: task.description,\r\n      status: task.status,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      deadline: task.deadline,\r\n      ...domainModel\r\n    }\r\n\r\n    todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n      .then(res => {\r\n        const action = updateTaskAC(taskId, domainModel, todolistId)\r\n        dispatch(action)\r\n      })\r\n  }\r\n  \r\n// types\r\nexport type ActionsType = \r\n| ReturnType<typeof removeTaskAC>\r\n| ReturnType<typeof addTaskAC>\r\n| ReturnType<typeof updateTaskAC>\r\n| ReturnType<typeof setTasksAC>\r\n| AddTodolistActionType\r\n| RemoveTodolistActionType\r\n| SetTodolistsActionType\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TodoTaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}","import { IconButton, TextField } from '@material-ui/core'\r\nimport { Add } from '@material-ui/icons'\r\nimport React, { ChangeEvent, useState, KeyboardEvent } from 'react'\r\n\r\n    type AddItemFormPropsType = {\r\n        addItem: (title: string) => void\r\n    }\r\n\r\n    const AddItemForm = React.memo( (props: AddItemFormPropsType) => {\r\n\r\n        const [title, setTitle ] = useState('')\r\n        const [errorMessage, setErrorMessage] = useState<string | null>(null)\r\n\r\n        const addItem = () => {\r\n            if(title.trim() !== '') {\r\n                props.addItem(title.trim())\r\n                setTitle('')\r\n            } else {\r\n                setErrorMessage('Title is required!')\r\n            }\r\n        }\r\n\r\n        const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            if (errorMessage !== null) {\r\n                setErrorMessage(null)\r\n            }\r\n            setTitle(e.currentTarget.value)\r\n        }\r\n\r\n        const onPressEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if(e.charCode === 13) {\r\n                addItem()\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <TextField\r\n                    value={title}\r\n                    id={'outlined-error-helper-text'}\r\n                    variant={'outlined'}\r\n                    label={'Type text'}\r\n                    error={!!errorMessage}\r\n                    onChange={onChangeTitleHandler}\r\n                    onKeyPress={onPressEnterHandler}\r\n                    className={errorMessage ? 'error' : ''}\r\n                    helperText={errorMessage}\r\n                    size={'small'}\r\n                />\r\n                <IconButton\r\n                    onClick={addItem}\r\n                    color={'primary'}\r\n                >\r\n                    <Add fontSize={'large'}/>\r\n                </IconButton>\r\n                \r\n            </div>\r\n        )\r\n    })\r\n\r\n    export default AddItemForm","import { TextField } from '@material-ui/core'\r\nimport React, { ChangeEvent, useState } from 'react'\r\n\r\nexport type EditableSpanPropsType = {\r\n  title: string\r\n  onChange: (newValue: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo( (props: EditableSpanPropsType) => {\r\n  \r\n  const [editMode, setEditMode] = useState(false)\r\n  const [title, setTitle] = useState(\"\")\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n    setTitle(props.title)\r\n  }\r\n  const activateViewMode = () => {\r\n    setEditMode(false)\r\n    props.onChange(title)\r\n  }\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    return  editMode\r\n      ? <TextField value={title} onChange={onChangeTitle} onBlur={activateViewMode} autoFocus/>\r\n      : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})\r\n\r\nexport default EditableSpan","import React, { ChangeEvent, useCallback } from 'react'\r\nimport EditableSpan from '../../../../components/EditableSpan'\r\nimport { Checkbox, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolist-api'\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo( (props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newstatusValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newstatusValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }\r\n    const onTitleChangeHanler = useCallback( (newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n            />\r\n            \r\n            <EditableSpan title={props.task.title} onChange={onTitleChangeHanler} />\r\n            <IconButton onClick={onClickHandler}><Delete /></IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Task","import React, { useCallback, useEffect } from 'react'\r\nimport AddItemForm from '../../../components/AddItemForm'\r\nimport EditableSpan from '../../../components/EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport Task from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolist-api'\r\nimport { FilterValuesType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\n\r\nexport type PropsType = {\r\n    id: string\r\n    tasks: Array<TaskType>\r\n    title: string\r\n    filter: FilterValuesType\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    removeTodoList: (id: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo (function(props: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [dispatch, props.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props])\r\n    \r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        props.changeTodoListTitle(props.id, newTitle)\r\n    }, [props])\r\n\r\n    const onAllClickHandler = useCallback( () => props.changeFilter('all', props.id), [props])\r\n    const onActiveClickHandler = useCallback( () => props.changeFilter('active', props.id), [props])\r\n    const onCompletedClickHandler = useCallback( () => props.changeFilter('completed', props.id), [props])\r\n\r\n    let tasksForTodoList = props.tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChange={changeTodoListTitle} />\r\n                <IconButton onClick={removeTodoList}><Delete /></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} />\r\n            <div>\r\n                { \r\n                    tasksForTodoList.map(t =>\r\n                        <Task\r\n                            key={t.id}\r\n                            task={t}\r\n                            todolistId={props.id}\r\n                            removeTask={props.removeTask}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                        />)\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    variant={props.filter === 'all' ? 'contained' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    size={'small'}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    variant={props.filter === 'active' ? 'contained' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}\r\n                    size={'small'}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    variant={props.filter === 'completed' ? 'contained' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color=\"secondary\"\r\n                    size=\"small\"\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default TodoList","import React, { useCallback, useEffect } from 'react'\r\nimport '../../app/App.css'\r\nimport { Grid, Paper } from '@material-ui/core'\r\nimport { addTodolistTC, changeTodolistFilterAC, changeTodolistTitleTC, fetchTodolistsTC, FilterValuesType, removeTodolistTC, TodolistDomainType } from '../TodolistsList/todolists-reducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addTaskTC, updateTaskTC, removeTaskTC, TasksStateType } from '../TodolistsList/tasks-reducer'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { TaskStatuses } from '../../api/todolist-api'\r\nimport TodoList from './Todolist/TodoList'\r\nimport AddItemForm from '../../components/AddItemForm'\r\n\r\ntype TodolistsListPropsType = {}\r\nconst TodolistList: React.FC<TodolistsListPropsType> = (props) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC(taskId, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(taskId, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(taskId, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function ( value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilterAC(value, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((todolistId: string, newTitle: string) => {\r\n        const thunk = changeTodolistTitleTC(todolistId, newTitle)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    return(\r\n        <>\r\n            <Grid container style={{ padding: \"20px\" }}>\r\n                <AddItemForm addItem={addTodolist} />\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id]\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper elevation={3} style={{ padding: \"15px\" }}>\r\n                                    <TodoList\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodolistList","import React from 'react'\r\nimport './App.css'\r\nimport { AppBar, Button, Container, IconButton, Toolbar, Typography } from '@material-ui/core'\r\nimport TodolistList from '../features/TodolistsList/TodolistList'\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    </IconButton>\r\n                    <Typography variant=\"h5\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistList />\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { tasksReducer } from '../features/TodolistsList/tasks-reducer'\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer'\r\n\r\n// creating the structure of the state object\r\nconst rootReducer = combineReducers({\r\n  todolists: todolistsReducer,\r\n  tasks: tasksReducer\r\n})\r\n\r\n// define the type of the entire state object\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// create store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n// to access the state through the browser console\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './app/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  , document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}