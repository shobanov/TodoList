{"version":3,"sources":["api/todolist-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/tasks-reducer.ts","TodoList.tsx","state/todolists-reducer.ts","AppWithRedux.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TodoTaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","errorMessage","setErrorMessage","addItem","trim","TextField","value","id","variant","label","error","onChange","e","currentTarget","onKeyPress","charCode","className","helperText","size","IconButton","onClick","color","Add","fontSize","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","todolistId","taskId","delete","Task","onTitleChangeHanler","useCallback","newValue","changeTaskTitle","task","key","status","Completed","Checkbox","checked","newstatusValue","changeTaskStatus","New","removeTask","Delete","initialState","TodoList","dispatch","useDispatch","useEffect","then","res","action","tasks","type","setTasksAC","data","items","addTask","changeTodoListTitle","newTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodoList","filter","t","removeTodoList","map","Button","removeTodolistAC","AppWithRedux","todolists","useSelector","state","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","changeTaskTitleAC","changeTodolistFilterAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","tasksForTodolist","item","Paper","elevation","Boolean","window","location","hostname","match","rootReducer","combineReducers","addedDate","order","todolist","find","stateCopy","filteredTasks","newTask","descripion","priority","Low","startDate","deadLine","newTasks","todolistTasks","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.854576d7.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': 'fdb08a17-9e00-497a-9ef1-efaa046e77dc'\r\n  }\r\n}\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n  ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n  resultCode: number\r\n  messages: Array<string> // or string[]\r\n  data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\n\r\n\r\nexport enum TodoTaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n  title: string\r\n  todolistId: string\r\n  id: string\r\n  descripion: string\r\n  status: TaskStatuses\r\n  order: number\r\n  priority: TodoTaskPriorities\r\n  startDate: string\r\n  deadLine: string\r\n  addedDate: string\r\n}\r\n\r\nexport type UpdateTaskType = {\r\n  descripion: string\r\n  title: string\r\n  status: boolean\r\n  priority: number\r\n  startDate: string\r\n  deadLine: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: TaskType[]\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n  title: string\r\n  descripion: string\r\n  status: number\r\n  priority: number\r\n  startDate: string\r\n  deadLine: string\r\n}\r\n\r\n\r\nexport const todolistsAPI = {\r\n  getTodolists() {\r\n    return instance.get<Array<TodolistType>>('todo-lists')\r\n  },\r\n\r\n  createTodolist(title: string) {\r\n    return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title})\r\n  },\r\n\r\n  deleteTodolist(id: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n  },\r\n\r\n  updateTodolist(id: string, title: string) {\r\n    return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n  },\r\n\r\n  getTasks(todolistId: string) {\r\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n  },\r\n\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n  },\r\n\r\n  createTask(todolistId: string, taskTitle: string) {\r\n    return instance.post<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle})\r\n  },\r\n\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n    \r\n  }\r\n}","import { IconButton, TextField } from '@material-ui/core'\r\nimport { Add } from '@material-ui/icons'\r\nimport React, { ChangeEvent, useState, KeyboardEvent } from 'react'\r\n\r\n    type AddItemFormPropsType = {\r\n        addItem: (title: string) => void\r\n    }\r\n\r\n    const AddItemForm = React.memo( (props: AddItemFormPropsType) => {\r\n\r\n        const [title, setTitle ] = useState('')\r\n        const [errorMessage, setErrorMessage] = useState<string | null>(null)\r\n\r\n        const addItem = () => {\r\n            if(title.trim() !== '') {\r\n                props.addItem(title.trim())\r\n                setTitle('')\r\n            } else {\r\n                setErrorMessage('Title is required!')\r\n            }\r\n        }\r\n\r\n        const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            if (errorMessage !== null) {\r\n                setErrorMessage(null)\r\n            }\r\n            setTitle(e.currentTarget.value)\r\n        }\r\n\r\n        const onPressEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if(e.charCode === 13) {\r\n                addItem()\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <TextField\r\n                    value={title}\r\n                    id={'outlined-error-helper-text'}\r\n                    variant={'outlined'}\r\n                    label={'Type text'}\r\n                    error={!!errorMessage}\r\n                    onChange={onChangeTitleHandler}\r\n                    onKeyPress={onPressEnterHandler}\r\n                    className={errorMessage ? 'error' : ''}\r\n                    helperText={errorMessage}\r\n                    size={'small'}\r\n                />\r\n                <IconButton\r\n                    onClick={addItem}\r\n                    color={'primary'}\r\n                >\r\n                    <Add fontSize={'large'}/>\r\n                </IconButton>\r\n                \r\n            </div>\r\n        )\r\n    })\r\n\r\n    export default AddItemForm","import { TextField } from '@material-ui/core'\r\nimport React, { ChangeEvent, useMemo, useState } from 'react'\r\n\r\nexport type EditableSpanPropsType = {\r\n  title: string\r\n  onChange: (newValue: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo( (props: EditableSpanPropsType) => {\r\n  \r\n  const [editMode, setEditMode] = useState(false)\r\n  const [title, setTitle] = useState(\"\")\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n    setTitle(props.title)\r\n  }\r\n  const activateViewMode = () => {\r\n    setEditMode(false)\r\n    props.onChange(title)\r\n  }\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    return  editMode\r\n      ? <TextField value={title} onChange={onChangeTitle} onBlur={activateViewMode} autoFocus/>\r\n      : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})\r\n\r\nexport default EditableSpan","import React, { ChangeEvent, useCallback } from 'react'\r\nimport EditableSpan from './EditableSpan'\r\nimport { Checkbox, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { TaskStatuses, TaskType } from './api/todolist-api'\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo( (props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newstatusValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newstatusValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }\r\n    const onTitleChangeHanler = useCallback( (newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId, props.changeTaskTitle])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n            />\r\n            \r\n            <EditableSpan title={props.task.title} onChange={onTitleChangeHanler} />\r\n            <IconButton onClick={onClickHandler}><Delete /></IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Task","import { stat } from \"fs\"\r\nimport { Dispatch } from \"redux\"\r\nimport { v1 } from \"uuid\"\r\nimport { TaskStatuses, TaskType, todolistsAPI, TodoTaskPriorities } from \"../api/todolist-api\"\r\nimport { TasksStateType } from \"../AppWithRedux\"\r\nimport { AddTodolistActionType, RemoveTodolistActionType, setTodolistAC, SetTodolistsActionType, TodolistDomainType} from \"./todolists-reducer\"\r\n\r\nexport type ActionsType = RemoveTaskActionType\r\n  | AddTaskActionType\r\n  | ChangeTaskStatusActionType\r\n  | ChangeTaskTitleActionType\r\n  | AddTodolistActionType\r\n  | RemoveTodolistActionType\r\n  | SetTodolistsActionType\r\n  | SetTasksActionType\r\n\r\nexport type RemoveTaskActionType = { \r\n  type: 'REMOVE-TASK'\r\n  todolistId: string\r\n  taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = { \r\n  type: 'ADD-TASK'\r\n  title: string\r\n  todolistId: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n  type: 'CHANGE-TASK-STATUS'\r\n  todolistId: string\r\n  taskId: string\r\n  status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n  type: 'CHANGE-TASK-TITLE'\r\n  todolistId: string\r\n  taskId: string\r\n  title: string\r\n}\r\n\r\nexport type SetTasksActionType = { \r\n  type: 'SET-TASKS'\r\n  tasks: Array<TaskType>\r\n  todolistId: string\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n  \r\n  switch (action.type) {\r\n      case 'REMOVE-TASK': {\r\n        const stateCopy = {...state}\r\n        const tasks = state[action.todolistId]\r\n        const filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n        stateCopy[action.todolistId] = filteredTasks\r\n        return stateCopy\r\n      }\r\n      case 'ADD-TASK': {\r\n        const stateCopy = {...state}\r\n        const newTask: TaskType = {\r\n          id: v1(),\r\n          title: action.title,\r\n          status: TaskStatuses.New,\r\n          todolistId: action.todolistId,\r\n          descripion: '',\r\n          order: 0,\r\n          priority: TodoTaskPriorities.Low,\r\n          startDate: '',\r\n          deadLine: '',\r\n          addedDate: ''\r\n        }\r\n        const tasks = stateCopy[action.todolistId]\r\n        const newTasks = [newTask, ...tasks]\r\n        stateCopy[action.todolistId] = newTasks\r\n        return stateCopy\r\n      }\r\n      case 'CHANGE-TASK-STATUS': {\r\n        let todolistTasks = state[action.todolistId]\r\n        state[action.todolistId] = todolistTasks\r\n          .map(t => t.id === action.taskId\r\n            ? {...t, status: action.status}\r\n            : t)\r\n        return ({...state})\r\n      }\r\n      case 'CHANGE-TASK-TITLE': {\r\n        let todolistTasks = state[action.todolistId]\r\n        state[action.todolistId] = todolistTasks\r\n          .map(t => t.id === action.taskId\r\n            ? {...t, title: action.title}\r\n            : t)\r\n        return ({...state})\r\n      }\r\n      case 'ADD-TODOLIST': {\r\n        return {\r\n          ...state,\r\n          [action.todolistId]: []\r\n        }\r\n      }\r\n      case 'REMOVE-TODOLIST': {\r\n        const stateCopy = {...state}\r\n        delete stateCopy[action.id]\r\n        return stateCopy\r\n      }\r\n      case 'SET-TODOLISTS': {\r\n        const copyState = {...state}\r\n        action.todolists.forEach(tl => {\r\n          copyState[tl.id] = []\r\n        })\r\n        return copyState\r\n      }\r\n      case 'SET-TASKS': {\r\n        const copyState = {...state}\r\n        copyState[action.todolistId] = action.tasks\r\n        return copyState\r\n      }\r\n      default:\r\n          return state\r\n  }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n  return { type: 'REMOVE-TASK', todolistId, taskId }\r\n}\r\n\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n  return { type: 'ADD-TASK', title, todolistId: todolistId }\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n  return { type: 'CHANGE-TASK-STATUS', taskId, status, todolistId }\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n  return { type: 'CHANGE-TASK-TITLE', taskId, todolistId, title }\r\n}\r\n\r\nexport const addTodolistAC = (title: string, todolistId: string): AddTodolistActionType => {\r\n  return { type: 'ADD-TODOLIST', title, todolistId }\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n  return { type: 'SET-TASKS', tasks, todolistId }\r\n}\r\n\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    todolistsAPI.getTasks(todolistId)\r\n      .then((res) => {\r\n        const tasks = res.data.items\r\n        const action = setTasksAC(tasks, todolistId)\r\n        dispatch(action)\r\n      })\r\n  }\r\n}","import React, { useCallback, useEffect } from 'react'\r\nimport AddItemForm from './AddItemForm'\r\nimport EditableSpan from './EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport Task from './Task'\r\nimport { TaskStatuses, TaskType } from './api/todolist-api'\r\nimport { FilterValuesType } from './state/todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from './state/tasks-reducer'\r\n\r\n\r\nexport type PropsType = {\r\n    id: string\r\n    tasks: Array<TaskType>\r\n    title: string\r\n    filter: FilterValuesType\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    removeTodoList: (id: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo (function(props: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n    \r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        props.changeTodoListTitle(props.id, newTitle)\r\n    }, [props.changeTodoListTitle, props.id])\r\n\r\n    const onAllClickHandler = useCallback( () => props.changeFilter('all', props.id), [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback( () => props.changeFilter('active', props.id), [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback( () => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\r\n\r\n    let tasksForTodoList = props.tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChange={changeTodoListTitle} />\r\n                <IconButton onClick={removeTodoList}><Delete /></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} />\r\n            <div>\r\n                { \r\n                    tasksForTodoList.map(t =>\r\n                        <Task\r\n                            key={t.id}\r\n                            task={t}\r\n                            todolistId={props.id}\r\n                            removeTask={props.removeTask}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                        />)\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    variant={props.filter === 'all' ? 'contained' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    size={'small'}\r\n                >All\r\n                </Button>\r\n                <Button\r\n                    variant={props.filter === 'active' ? 'contained' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}\r\n                    size={'small'}\r\n                >Active\r\n                </Button>\r\n                <Button\r\n                    variant={props.filter === 'completed' ? 'contained' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}\r\n                    size={'small'}\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default TodoList","import { Dispatch } from \"redux\"\r\nimport { v1 } from \"uuid\"\r\nimport { todolistsAPI, TodolistType } from \"../api/todolist-api\"\r\n\r\nexport type ActionsType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType | SetTodolistsActionType\r\n\r\nexport type FilterValuesType = 'all'|'active'|'completed'\r\n\r\nexport type RemoveTodolistActionType = { \r\n  type: 'REMOVE-TODOLIST'\r\n  id: string\r\n}\r\n\r\nexport type AddTodolistActionType = { \r\n  type: 'ADD-TODOLIST'\r\n  title: string\r\n  todolistId: string\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = { \r\n  type: 'CHANGE-TODOLIST-TITLE'\r\n  id: string\r\n  title: string\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = { \r\n  type: 'CHANGE-TODOLIST-FILTER'\r\n  filter: FilterValuesType\r\n  id: string\r\n}\r\n\r\nexport type SetTodolistsActionType = { \r\n  type: 'SET-TODOLISTS'\r\n  todolists: Array<TodolistType>\r\n}\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n  //status: boolean\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n  \r\n  switch (action.type) {\r\n      case 'REMOVE-TODOLIST': {\r\n        return state.filter(tl => tl.id !== action.id)\r\n      }\r\n      case 'ADD-TODOLIST': {\r\n        return [{\r\n          id: action.todolistId,\r\n          title: action.title,\r\n          filter: 'all',\r\n          addedDate: '',\r\n          order: 0,\r\n        }, ...state]\r\n      }\r\n      case 'CHANGE-TODOLIST-TITLE': {\r\n        const todolist = state.find(tl => tl.id === action.id)\r\n        if(todolist) {\r\n          todolist.title = action.title\r\n        }\r\n        return [...state]\r\n      }\r\n      case 'CHANGE-TODOLIST-FILTER': {\r\n        const todolist = state.find(tl => tl.id === action.id)\r\n        if(todolist) {\r\n          todolist.filter = action.filter\r\n        }\r\n        return [...state]\r\n      }\r\n      case 'SET-TODOLISTS': {\r\n        return action.todolists.map(tl => {\r\n          return {\r\n            ...tl,\r\n            filter: 'all'\r\n          }\r\n        })\r\n      }\r\n      default:\r\n          return state\r\n  }\r\n}\r\n\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n  return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\n\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n  return { type: 'ADD-TODOLIST', title, todolistId: v1()}\r\n}\r\n\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n  return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\n\r\nexport const changeTodolistFilterAC = (value: FilterValuesType, todolistId: string): ChangeTodolistFilterActionType => {\r\n  return { type: 'CHANGE-TODOLIST-FILTER', filter: value, id: todolistId}\r\n}\r\n\r\nexport const setTodolistAC = (todolists: Array<TodolistType>): SetTodolistsActionType => {\r\n  return { type: 'SET-TODOLISTS', todolists: todolists}\r\n}\r\n\r\n\r\nexport const fetchTodolistsTC = () => {\r\n  return (dispatch: Dispatch) => {\r\n    todolistsAPI.getTodolists()\r\n      .then((res) => {\r\n        dispatch(setTodolistAC(res.data))\r\n      })\r\n  }\r\n}","import React, { useCallback, useEffect } from 'react'\r\nimport './App.css'\r\nimport TodoList from './TodoList'\r\nimport AddItemForm from './AddItemForm'\r\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core'\r\nimport { addTodolistAC, changeTodolistFilterAC, changeTodolistTitleAC, fetchTodolistsTC, FilterValuesType, removeTodolistAC, TodolistDomainType } from './state/todolists-reducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './state/store'\r\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC } from './state/tasks-reducer'\r\nimport { TaskStatuses, TaskType, todolistsAPI} from './api/todolist-api'\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())    // dispatch thunk\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        todolistsAPI.deleteTask(todolistId, id)\r\n            .then(res => {\r\n                dispatch(removeTaskAC(id, todolistId))\r\n            })\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskAC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(changeTaskStatusAC(id, status, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\r\n        dispatch(changeTaskTitleAC(taskId, newTitle, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function ( value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilterAC(value, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback(function (todolistId: string) {\r\n        dispatch(removeTodolistAC(todolistId))\r\n        dispatch(removeTodolistAC(todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback( (todolistId: string, newTitle: string) => {\r\n        dispatch(changeTodolistTitleAC(todolistId, newTitle))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback( (title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    </IconButton>\r\n                    <Typography variant=\"h5\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{ padding: \"20px\" }}>\r\n                    <AddItemForm addItem={addTodolist} />\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id]\r\n                            let tasksForTodolist = allTodolistTasks\r\n                            return (\r\n                                <Grid item key={tl.id}>\r\n                                    <Paper elevation={3} style={{ padding: \"15px\" }}>\r\n                                        <TodoList\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasksForTodolist}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            addTask={addTask}\r\n                                            changeTaskStatus={changeStatus}\r\n                                            filter={tl.filter}\r\n                                            removeTodoList={removeTodoList}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodoListTitle={changeTodoListTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { tasksReducer } from './tasks-reducer'\r\nimport { todolistsReducer } from './todolists-reducer'\r\n\r\n// creating the structure of the state object\r\nconst rootReducer = combineReducers({\r\n  todolists: todolistsReducer,\r\n  tasks: tasksReducer\r\n})\r\n\r\n// define the type of the entire state object\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// create store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n// to access the state through the browser console\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './state/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <AppWithRedux />\r\n  </Provider>\r\n  , document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}